generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int        @id @default(autoincrement())
  name    String
  parent   Category?  @relation(name: "NestedCategories", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId Int?
  children Category[] @relation(name: "NestedCategories")
  posts    Post[]
}

model Post {
  id                  Int                   @id @default(autoincrement())
  name               String
  content             String
  author              User?                 @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId            Int?
  category            Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId          Int
  votes               Vote[]
  PostTagRelationship PostTagRelationship[]
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  admin    Boolean @default(false)
  posts    Post[]
  votes    Vote[]
}

model Vote {
  voter   User @relation(fields: [voterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voterId Int
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId  Int
  score   Int

  @@unique([voterId, postId])
}

model Tag {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  PostTagRelationship PostTagRelationship[]
}

model PostTagRelationship {
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId  Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId Int

  @@unique([tagId, postId])
}
